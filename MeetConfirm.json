{
  "name": "MeetConfirm",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "857d7f25-9acc-491d-b21d-1bf35a48d7ce",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "const { DateTime } = require('luxon');\n\n// Pega a data/hora atual no fuso de SÃ£o Paulo\nlet now = DateTime.now().setZone('America/Sao_Paulo');\nlet businessDaysToAdd = $input.first().json.daysToConfirm;\nlet targetDate = now;\n\nwhile (businessDaysToAdd > 0) {\n  targetDate = targetDate.plus({ days: 1 });\n  // Considera sÃ¡bado (6) e domingo (7) como nÃ£o Ãºteis\n  if (targetDate.weekday !== 6 && targetDate.weekday !== 7) {\n    businessDaysToAdd--;\n  }\n}\n\n// Formata a data para o formato que o Google Calendar entende (YYYY-MM-DD)\nconst startDate = targetDate.startOf('day').toISODate();\nconst endDate = targetDate.plus({ days: 1 }).endOf('day').toISODate();\n\n// Retorna as datas para os prÃ³ximos nÃ³s usarem\nreturn [{\n  json: {\n    startDate: startDate,\n    endDate: endDate\n  }\n}];\n//3.  Execute este nÃ³ clicando no Ã­cone de \"play\" nele. VocÃª deve ver na saÃ­da as datas de inÃ­cio e fim para daqui a 3 dias Ãºteis.\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        48
      ],
      "id": "153e756e-d71b-4202-b04d-6eacb5aebed2",
      "name": "Code"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        112
      ],
      "id": "be4db41e-30d5-4da7-9f78-82ff5f993d7a",
      "name": "When clicking â€˜Execute workflowâ€™"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "151df444-7823-4646-963b-0350a8764127",
              "name": "daysToConfirm",
              "value": 4,
              "type": "number"
            },
            {
              "id": "ccca0d45-c52d-482e-abb5-0625b78f4abf",
              "name": "evolutionInstance",
              "value": "Agente_Agendamento_HC",
              "type": "string"
            },
            {
              "id": "20d7f653-1367-492d-b77f-62ca007cd49c",
              "name": "botName",
              "value": "Assistente HC",
              "type": "string"
            },
            {
              "id": "3416c075-f7ce-428e-b0cf-9826e1bcf769",
              "name": "managerPhone",
              "value": "5511989214740",
              "type": "string"
            },
            {
              "id": "f237a34f-a346-4e7b-a3cd-de6d21513404",
              "name": "managerEmail",
              "value": "gabriel@hungaroconsultoria.com.br",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        288,
        48
      ],
      "id": "9ee64f38-af1f-4696-bceb-49b72089c046",
      "name": "ConfirmGlobal"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Nome do Cliente: {{ $('Unify All Data').item.json.clienteName }} (considerar apenas primeiro nome)\nApelido: {{ $('Unify All Data').item.json.clienteNick }}\nHora Atual: {{ $now }}\nData da ReuniÃ£o: {{ $('MeetVariables').item.json.dataReuniao }}\nDia da Semana: {{ $('MeetVariables').item.json.diaSemana }}\nHora de InÃ­cio: {{ $('MeetVariables').item.json.horaInicio }}\nHora de Fim: {{ $('MeetVariables').item.json.horaFim }}\nNome do Evento: {{ $('MeetVariables').item.json.nomeCompromisso }} (Geralmente o evento vem com nome no formato: [Nome do Evento - Nome do Cliente] caso tenha o nome do cliente retirar do nome do evento)",
        "options": {
          "systemMessage": "=##FunÃ§Ã£o\n\nVocÃª Ã© um assistente de agendamento de reuniÃµes da Hungaro Consultoria, uma empresa de planejamento financeiro.\n\nSua primeira funÃ§Ã£o Ã© enviar mensagem de confirmaÃ§Ã£o de reuniÃµes e lembrar os clientes de enviarem os documentos e informaÃ§Ãµes necessÃ¡rias para a prÃ³xima reuniÃ£o atÃ© data especÃ­fica.\n\nAlÃ©m da funÃ§Ã£o primÃ¡ria vocÃª tambÃ©m irÃ¡ tirar dÃºvidas sobre o agendamento de reuniÃµes, documentos necessÃ¡rios para que a reuniÃ£o aconteÃ§a da melhor forma.\n\nVocÃª deve iniciar a conversa com um Muito bom dia, boa tarde ou boa noite a depender do horÃ¡rio atual, alÃ©m de chamar sempre o cliente pelo nome.\t\nSeguindo o padrÃ£o brasileiro de data e hora (DD/MM/AAAA e HH), opere no fuso horÃ¡rio \"America/Sao_Paulo\". \n\nHora atual: {{ $now }}\nNome do cliente:  Caso a variÃ¡vel Apelido tenha sido preenchida usar ela como Nome do Cliente, caso contrÃ¡rio, use a variÃ¡vel Nome do Cliente.\n\n## Documentos NecessÃ¡rios para ReuniÃ£o\n- Extratos bancÃ¡rios das contas correntes;\n- Faturas dos cartÃµes de crÃ©dito;\n- Lista de acontecimentos previstos para os prÃ³ximos meses, como aniversÃ¡rio, eventos, viagens, datas comemorativas, renovaÃ§Ãµes de assinaturas ou serviÃ§os...\n\n*Os documentos devem ser enviados em formato PDF e CSV/Excel para o e-mail {{ $('Unify All Data').item.json.consultantEmail }}\n\n##Regras\n\n- Use o exemplo a baixo para ter um guia de como montar a mensagem.\n- Os valores da mensagem de exemplo que estÃ£o entre [] devem ser substituÃ­dos pelas variÃ¡veis definidas no promp de user message\n\n##Exemplo de mensagem\nMuuuuito bom dia, [Nome do Cliente], tudo bem?\n\nGostaria de confirmar nossa prÃ³xima reuniÃ£o de [Nome do Evento] agendada para *[Dia da Semana] - [Data da ReuniÃ£o] Ã s [Hora de InÃ­cio]*. Para que possamos otimizar nosso tempo e que seu planejamento financeiro seja o mais completo possÃ­vel, peÃ§o que, por gentileza, encaminhe os seguintes documentos atÃ© *[Data da reuniÃ£o - 2 dias Ãºteis] Ã s 10h*:\n\nðŸ“Œ *Extrato bancÃ¡rio* da data da nossa Ãºltima reuniÃ£o atÃ© hoje.\n\nðŸ“Œ *Faturas de cartÃ£o de crÃ©dito* do mesmo perÃ­odo.\n\nðŸ“Œ *Lista de acontecimentos previstos para os prÃ³ximos meses ainda nÃ£o planejados.*\n\nPor favor, envie os arquivos nos formatos *PDF* e tambÃ©m em *CSV ou Excel*.\n\nPode fazer o envio atravÃ©s desse e-mail: gabriel@hungaroconsultoria.com.br\n\nCaso tenha alguma dÃºvida ou precise de qualquer esclarecimento, estou Ã  disposiÃ§Ã£o.\n\nAguardo seu retorno e nos vemos em breve!\n\nComo ainda estou em fase de desenvolvimento peÃ§o que retorne o contato com o Gabriel:\nhttps://api.whatsapp.com/send?phone=5511989214740\n\nAtenciosamente, {{ $('MeetVariables').item.json.botName }}.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1936,
        304
      ],
      "id": "111e0a67-08ef-4c14-a735-e594459dfd69",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1936,
        480
      ],
      "id": "52806437-1e6e-4743-a70f-82987cfac8fe",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "nJopBduo6R0Rmkvt",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "de0c6516-1aa2-4411-ba7e-f7b9b19ac3c2",
              "leftValue": "={{ $json.attendees }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        864,
        48
      ],
      "id": "cdd361a2-56a7-47ae-8b94-125751fede72",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "c_7884974ab5a1eab27a106c4a78d7d6daf6c68570378b40d003382781ced7f9f4@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "Teste - HC"
        },
        "returnAll": true,
        "timeMin": "={{ $json.startDate }}",
        "timeMax": "={{ $json.endDate }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        656,
        48
      ],
      "id": "ea448fc2-0589-45ce-ae3e-a1541315829f",
      "name": "ConsultaAgenda",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Bct71lYLp9OoL4OX",
          "name": "Google HC"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const { DateTime } = require('luxon');\n\n// Pega os dados globais do primeiro nÃ³ (sÃ³ precisamos fazer isso uma vez).\nconst dadosGlobais = $('ConfirmGlobal').item.json;\n\nconst items = [];\nfor (const { json: ev } of $input.all()) {\n  const start = ev.start?.dateTime || ev.start?.date;   // ISO\n  const end   = ev.end?.dateTime   || ev.end?.date;\n\n  // Filtra sÃ³ convidados vÃ¡lidos (evita organizer/self/resources/declined)\n  const attendees = (ev.attendees || [])\n    .filter(a => a?.email)\n    .filter(a => !a.self && !a.resource && a.responseStatus !== 'declined');\n\n  for (const a of attendees) {\n    const dtStart = DateTime.fromISO(start).setZone('America/Sao_Paulo');\n    const dtEnd   = DateTime.fromISO(end).setZone('America/Sao_Paulo');\n\n    items.push({\n      json: {\n        // Contexto do evento\n        nomeCompromisso: ev.summary || '',\n        dataReuniao: dtStart.toFormat('dd/MM'),\n        diaSemana: dtStart.setLocale('pt-BR').toFormat('cccc'),\n        horaInicio: dtStart.toFormat('HH:mm'),\n        horaFim: dtEnd.toFormat('HH:mm'),\n        dataReuniaoISO: start,\n\n        // Convidado alvo\n        attendeeEmail: String(a.email).toLowerCase(),\n\n        // --- DADOS GLOBAIS QUE ESTAMOS PASSANDO ADIANTE ---\n        botName: dadosGlobais.botName,\n        evolutionInstance: dadosGlobais.evolutionInstance\n      }\n    });\n  }\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        32
      ],
      "id": "decd3896-cb75-487c-9a6b-c57c31e4beca",
      "name": "MeetVariables"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "meetconfirm",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        -256
      ],
      "id": "f99c5e57-5b49-47e1-b1b6-b5ba2c0f3198",
      "name": "Webhook",
      "webhookId": "d32a416c-d98a-4274-a5e8-9ede510e6f67"
    },
    {
      "parameters": {
        "jsCode": "// Carrega TODAS as listas de dados de que precisamos.\n// $items() Ã© a funÃ§Ã£o correta para pegar todos os resultados de um nÃ³.\nconst allEvents = $items(\"MeetVariables\");\nconst allClients = $items(\"SearchClient\");\nconst allConsultants = $items(\"SearchConsultant\");\n\nconst finalItems = [];\n\n// O loop principal DEVE ser sobre a lista de \"tarefas\", que Ã© a lista de convidados/eventos.\nfor (const eventItem of allEvents) {\n  const dadosEvento = eventItem.json;\n  const attendeeEmail = dadosEvento.attendeeEmail;\n\n  // 1. Para este evento/convidado, encontre o registro do cliente correspondente.\n  const clientItem = allClients.find(c => c.json.property_e_mail === attendeeEmail);\n\n  // Se nÃ£o encontrarmos o cliente na nossa base, nÃ£o podemos continuar.\n  if (!clientItem) {\n    // console.log(`Cliente com email ${attendeeEmail} nÃ£o encontrado.`);\n    continue;\n  }\n  const dadosCliente = clientItem.json;\n\n  // 2. Agora que temos o cliente, pegue o ID do consultor responsÃ¡vel por ele.\n  const consultantId = dadosCliente.property_responsible_consultant ? dadosCliente.property_responsible_consultant[0] : null;\n\n  // Se o cliente nÃ£o tiver um consultor, nÃ£o podemos continuar.\n  if (!consultantId) {\n    // console.log(`Cliente ${dadosCliente.name} nÃ£o tem consultor responsÃ¡vel.`);\n    continue;\n  }\n\n  // 3. Com o ID do consultor, encontre os detalhes completos do consultor.\n  const consultantItem = allConsultants.find(c => c.json.id === consultantId);\n\n  // Se, por algum motivo, nÃ£o encontrarmos os detalhes do consultor, nÃ£o continue.\n  if (!consultantItem) {\n    // console.log(`Detalhes do consultor com ID ${consultantId} nÃ£o encontrados.`);\n    continue;\n  }\n  const dadosConsultor = consultantItem.json;\n\n  // 4. SUCESSO! Encontramos todas as partes. Montamos o objeto final.\n  finalItems.push({\n    json: {\n      // --- DADOS DO CONSULTOR ---\n      consultantName: dadosConsultor.property_name,\n      consultantPhone: dadosConsultor.property_phone,\n      consultantEmail: dadosConsultor.property_email,\n\n      // --- DADOS DO CLIENTE ---\n      clienteName: dadosCliente.name,\n      clienteEmail: dadosCliente.property_e_mail,\n      clientePhone: dadosCliente.property_telefone,\n      clienteChatId: dadosCliente.property_telefone ? dadosCliente.property_telefone.replace(/\\D/g, '') + '@s.whatsapp.net' : '',\n      clienteNick: dadosCliente.property_apelido_razao_social,\n\n      // --- DADOS DO EVENTO ---\n      nomeCompromisso: dadosEvento.nomeCompromisso,\n      dataReuniao: dadosEvento.dataReuniao,\n      diaSemana: dadosEvento.diaSemana,\n      horaInicio: dadosEvento.horaInicio,\n      horaFim: dadosEvento.horaFim,\n      dataReuniaoISO: dadosEvento.dataReuniaoISO,\n    }\n  });\n}\n\n// Retorna a lista final com todos os itens corretamente combinados.\nreturn finalItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        320
      ],
      "id": "78f2cafb-eb11-48eb-8ebe-3418c981e33c",
      "name": "Unify All Data"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "bf1094d6-c997-456f-82eb-cd30352c85c3",
          "mode": "list",
          "cachedResultName": "Lista de Contatos",
          "cachedResultUrl": "https://www.notion.so/bf1094d6c997456f82ebcd30352c85c3"
        },
        "returnAll": true,
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "key": "E-mail|email",
              "condition": "equals",
              "emailValue": "={{ $('MeetVariables').item.json.attendeeEmail }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        224,
        336
      ],
      "id": "e844f8da-28a8-413c-8332-4c6c1394d1ea",
      "name": "SearchClient",
      "credentials": {
        "notionApi": {
          "id": "D1pXvNxNoBaVi0WB",
          "name": "Notion account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "get",
        "pageId": {
          "__rl": true,
          "value": "={{ $json.property_responsible_consultant[0] }}",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        608,
        320
      ],
      "id": "1aa66ecf-423e-4f8e-ba0c-a0c8cf7015fa",
      "name": "SearchConsultant",
      "credentials": {
        "notionApi": {
          "id": "D1pXvNxNoBaVi0WB",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cf73de9-3164-4400-ad3b-5b094c48bced",
              "name": "alertMessage",
              "value": "=OlÃ¡, {{ $json.consultantName }}. \nO sistema tentou enviar um lembrete de reuniÃ£o para o cliente *\"{{ $json.clienteName }}\"* (email: {{ $json.clienteEmail }}), mas o cadastro dele estÃ¡ sem nÃºmero de telefone. Por favor, atualize o Notion para garantir os prÃ³ximos envios.\n\nPor favor, atualize o cadastro clicando no link abaixo:\n{{ $('SearchClient').item.json.url }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1936,
        704
      ],
      "id": "248140a2-7e1f-44ab-81a6-4fd6816b0b66",
      "name": "Build Consultant Alert"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('MeetVariables').item.json.evolutionInstance }}",
        "remoteJid": "={{ $json.consultantPhone.replace(/\\D/g, '') }}@s.whatsapp.net",
        "messageText": "={{ $json.alertMessage }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2144,
        704
      ],
      "id": "5a6145f8-a484-416b-a4a8-f5a40a88c813",
      "name": "Send Alert to Consultant",
      "credentials": {
        "evolutionApi": {
          "id": "j5AbWpMg04wmHEJE",
          "name": "Evolution account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "908d539e-6b13-42ff-ab3f-aae9cd899336",
              "leftValue": "={{ $json.clientePhone }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1360,
        320
      ],
      "id": "3dd253b3-a716-43c1-954b-01583bc09e3a",
      "name": "ClientPhoneVerify"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('MeetVariables').item.json.evolutionInstance }}",
        "remoteJid": "={{ $('Unify All Data').item.json.clienteChatId }}",
        "messageText": "={{ $json.output }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2320,
        304
      ],
      "id": "11ca3e44-180a-4a0e-9930-25ab91a205e4",
      "name": "SendConfirmMessage",
      "credentials": {
        "evolutionApi": {
          "id": "j5AbWpMg04wmHEJE",
          "name": "Evolution account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "content-type": "application/json",
            "user-agent": "axios/1.7.9",
            "content-length": "975",
            "accept-encoding": "gzip, compress, deflate, br",
            "host": "host.docker.internal:5678",
            "connection": "keep-alive"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Agente_Agendamento_HC",
            "data": {
              "key": {
                "remoteJid": "5511989214740@s.whatsapp.net",
                "fromMe": false,
                "id": "3FD3EE0B760654979730"
              },
              "pushName": "Gabriel Hungaro",
              "status": "DELIVERY_ACK",
              "message": {
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "iqhrFRqNEa+yuw==",
                    "senderTimestamp": "1755307284",
                    "recipientKeyHash": "QgiiVvPrP1kM1Q==",
                    "recipientTimestamp": "1755307322"
                  },
                  "deviceListMetadataVersion": 2
                },
                "conversation": "Ola"
              },
              "contextInfo": {
                "expiration": 0,
                "ephemeralSettingTimestamp": "0",
                "disappearingMode": {
                  "initiator": "CHANGED_IN_CHAT"
                }
              },
              "messageType": "conversation",
              "messageTimestamp": 1755308635,
              "instanceId": "2607dd47-0ea5-4d99-a535-bf330cb12868",
              "source": "unknown"
            },
            "destination": "http://host.docker.internal:5678/webhook-test/meetconfirm",
            "date_time": "2025-08-15T22:43:56.229Z",
            "sender": "5511982003176@s.whatsapp.net",
            "server_url": "https://evolutionapi.vps.hungaroconsultoria.com.br",
            "apikey": "DDB695A8AE21-4AEF-A34B-1A5AB932C72F"
          },
          "webhookUrl": "http://n8n:5678/webhook-test/meetconfirm",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "ConfirmGlobal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "ConsultaAgenda",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking â€˜Execute workflowâ€™": {
      "main": [
        [
          {
            "node": "ConfirmGlobal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ConfirmGlobal": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "SendConfirmMessage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "MeetVariables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ConsultaAgenda": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MeetVariables": {
      "main": [
        [
          {
            "node": "SearchClient",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unify All Data": {
      "main": [
        [
          {
            "node": "ClientPhoneVerify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SearchClient": {
      "main": [
        [
          {
            "node": "SearchConsultant",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "SearchConsultant": {
      "main": [
        [
          {
            "node": "Unify All Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Consultant Alert": {
      "main": [
        [
          {
            "node": "Send Alert to Consultant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ClientPhoneVerify": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Consultant Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SendConfirmMessage": {
      "main": [
        [],
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "80bcc54c-13dd-4d91-88dd-0d6f84ba5249",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c639fe7ebeb422477546545535913c1fe6d467efc75f0ba65b23a5e5a0935928"
  },
  "id": "MIGWxsVABQ7E4uYm",
  "tags": []
}